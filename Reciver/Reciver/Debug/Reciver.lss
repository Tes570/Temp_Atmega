
Reciver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b79  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094c  00000000  00000000  00001089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ca  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ec  00000000  00000000  000024f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f7 c0       	rjmp	.+494    	; 0x224 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d1       	rcall	.+614    	; 0x32a <main>
  c4:	62 c1       	rjmp	.+708    	; 0x38a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	89 f0       	breq	.+34     	; 0xee <initUSART+0x26>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	87 e8       	ldi	r24, 0x87	; 135
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	83 e1       	ldi	r24, 0x13	; 19
  e8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ec:	08 95       	ret
  ee:	e9 ec       	ldi	r30, 0xC9	; 201
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
  f8:	ea ec       	ldi	r30, 0xCA	; 202
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 108:	83 e1       	ldi	r24, 0x13	; 19
 10a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10e:	08 95       	ret

00000110 <USART_Receive>:
	}
}

unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f0       	breq	.+16     	; 0x124 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) );
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <USART_Receive+0x8>
		return UDR0; 
 11e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 122:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 124:	e8 ec       	ldi	r30, 0xC8	; 200
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <USART_Receive+0x18>
		return UDR1;
 12e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 132:	08 95       	ret

00000134 <TickFct_Follower>:
#include "scheduler.h"


enum States { Wait, Output };
int TickFct_Follower(int state) {
	switch(state) { 
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	51 f4       	brne	.+20     	; 0x14c <TickFct_Follower+0x18>
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
}

unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 138:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case -1: 
		state = Wait;
		break;
		
		case Wait:
		if(USART_HasReceived(0)){
 13c:	22 23       	and	r18, r18
 13e:	44 f4       	brge	.+16     	; 0x150 <TickFct_Follower+0x1c>
		
		case Wait:
		break;
		
		case Output:
		PORTA = USART_Receive(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	e6 df       	rcall	.-52     	; 0x110 <USART_Receive>
 144:	82 b9       	out	0x02, r24	; 2
		break;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
#include "scheduler.h"


enum States { Wait, Output };
int TickFct_Follower(int state) {
	switch(state) { 
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
		state = -1;
		break;
	}

	return state;
}
 150:	08 95       	ret

00000152 <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 160:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 164:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tasksNum>
 168:	88 23       	and	r24, r24
 16a:	09 f4       	brne	.+2      	; 0x16e <TimerISR+0x1c>
 16c:	53 c0       	rjmp	.+166    	; 0x214 <TimerISR+0xc2>
 16e:	80 e0       	ldi	r24, 0x00	; 0
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 170:	1b e0       	ldi	r17, 0x0B	; 11
 172:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <tasks>
 176:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <tasks+0x1>
 17a:	18 9f       	mul	r17, r24
 17c:	c0 0d       	add	r28, r0
 17e:	d1 1d       	adc	r29, r1
 180:	11 24       	eor	r1, r1
 182:	4d 81       	ldd	r20, Y+5	; 0x05
 184:	5e 81       	ldd	r21, Y+6	; 0x06
 186:	6f 81       	ldd	r22, Y+7	; 0x07
 188:	78 85       	ldd	r23, Y+8	; 0x08
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	ab 81       	ldd	r26, Y+3	; 0x03
 190:	bc 81       	ldd	r27, Y+4	; 0x04
 192:	48 17       	cp	r20, r24
 194:	59 07       	cpc	r21, r25
 196:	6a 07       	cpc	r22, r26
 198:	7b 07       	cpc	r23, r27
 19a:	b0 f0       	brcs	.+44     	; 0x1c8 <TimerISR+0x76>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 19c:	88 81       	ld	r24, Y
 19e:	e9 85       	ldd	r30, Y+9	; 0x09
 1a0:	fa 85       	ldd	r31, Y+10	; 0x0a
 1a2:	08 2e       	mov	r0, r24
 1a4:	00 0c       	add	r0, r0
 1a6:	99 0b       	sbc	r25, r25
 1a8:	09 95       	icall
 1aa:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <tasks>
 1b4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <tasks+0x1>
 1b8:	18 9f       	mul	r17, r24
 1ba:	e0 0d       	add	r30, r0
 1bc:	f1 1d       	adc	r31, r1
 1be:	11 24       	eor	r1, r1
 1c0:	15 82       	std	Z+5, r1	; 0x05
 1c2:	16 82       	std	Z+6, r1	; 0x06
 1c4:	17 82       	std	Z+7, r1	; 0x07
 1c6:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1cc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <tasks>
 1d0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <tasks+0x1>
 1d4:	18 9f       	mul	r17, r24
 1d6:	e0 0d       	add	r30, r0
 1d8:	f1 1d       	adc	r31, r1
 1da:	11 24       	eor	r1, r1
 1dc:	c5 80       	ldd	r12, Z+5	; 0x05
 1de:	d6 80       	ldd	r13, Z+6	; 0x06
 1e0:	e7 80       	ldd	r14, Z+7	; 0x07
 1e2:	f0 84       	ldd	r15, Z+8	; 0x08
 1e4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f4:	4c 0d       	add	r20, r12
 1f6:	5d 1d       	adc	r21, r13
 1f8:	6e 1d       	adc	r22, r14
 1fa:	7f 1d       	adc	r23, r15
 1fc:	45 83       	std	Z+5, r20	; 0x05
 1fe:	56 83       	std	Z+6, r21	; 0x06
 200:	67 83       	std	Z+7, r22	; 0x07
 202:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 20a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tasksNum>
 20e:	89 17       	cp	r24, r25
 210:	08 f4       	brcc	.+2      	; 0x214 <TimerISR+0xc2>
 212:	af cf       	rjmp	.-162    	; 0x172 <TimerISR+0x20>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	08 95       	ret

00000224 <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	0b b6       	in	r0, 0x3b	; 59
 230:	0f 92       	push	r0
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 24a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tasksPeriodCntDown>
 24e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tasksPeriodCntDown+0x1>
 252:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <tasksPeriodCntDown+0x2>
 256:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <tasksPeriodCntDown+0x3>
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	a1 09       	sbc	r26, r1
 25e:	b1 09       	sbc	r27, r1
 260:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksPeriodCntDown>
 264:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tasksPeriodCntDown+0x1>
 268:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <tasksPeriodCntDown+0x2>
 26c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 270:	89 2b       	or	r24, r25
 272:	8a 2b       	or	r24, r26
 274:	8b 2b       	or	r24, r27
 276:	89 f4       	brne	.+34     	; 0x29a <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 278:	6c df       	rcall	.-296    	; 0x152 <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 286:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 28a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksPeriodCntDown>
 28e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tasksPeriodCntDown+0x1>
 292:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <tasksPeriodCntDown+0x2>
 296:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <tasksPeriodCntDown+0x3>
	}
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0b be       	out	0x3b, r0	; 59
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 2c0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 2d0:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <tasksPeriodCntDown>
 2d4:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <tasksPeriodCntDown+0x1>
 2d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tasksPeriodCntDown+0x2>
 2dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tasksPeriodCntDown+0x3>
 2e0:	08 95       	ret

000002e2 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// Thus TCCR1B = 00001011 or 0x0B
	// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 2e8:	8d e7       	ldi	r24, 0x7D	; 125
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	#else
	TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	#endif

	// Initialize avr counter
	TCNT1 = 0;
 2fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 306:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 30a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 30e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 312:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksPeriodCntDown>
 316:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tasksPeriodCntDown+0x1>
 31a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <tasksPeriodCntDown+0x2>
 31e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 322:	8f b7       	in	r24, 0x3f	; 63
 324:	80 68       	ori	r24, 0x80	; 128
 326:	8f bf       	out	0x3f, r24	; 63
 328:	08 95       	ret

0000032a <main>:

int main(void) {
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	2b 97       	sbiw	r28, 0x0b	; 11
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00;
 33e:	1f ef       	ldi	r17, 0xFF	; 255
 340:	11 b9       	out	0x01, r17	; 1
 342:	12 b8       	out	0x02, r1	; 2
	
	initUSART(0);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	c0 de       	rcall	.-640    	; 0xc8 <initUSART>
	
	tasksNum = 1; 
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tasksNum>
	task tsks[1]; 
	tasks = tsks; 
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasks+0x1>
 356:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tasks>
	
	
	unsigned char i=0; 
	tasks[i].state = -1;
 35a:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 50;
 35c:	82 e3       	ldi	r24, 0x32	; 50
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	9b 83       	std	Y+3, r25	; 0x03
 368:	ac 83       	std	Y+4, r26	; 0x04
 36a:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 36c:	8e 83       	std	Y+6, r24	; 0x06
 36e:	9f 83       	std	Y+7, r25	; 0x07
 370:	a8 87       	std	Y+8, r26	; 0x08
 372:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Follower;
 374:	8a e9       	ldi	r24, 0x9A	; 154
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9b 87       	std	Y+11, r25	; 0x0b
 37a:	8a 87       	std	Y+10, r24	; 0x0a
	
	TimerSet(50); 
 37c:	62 e3       	ldi	r22, 0x32	; 50
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 384:	9d df       	rcall	.-198    	; 0x2c0 <TimerSet>
 386:	ad df       	rcall	.-166    	; 0x2e2 <TimerOn>
 388:	ff cf       	rjmp	.-2      	; 0x388 <main+0x5e>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
