
Transciver Custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6b  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d3  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e2  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ea 01       	movw	r28, r20
  8e:	ee 01       	movw	r28, r28
  90:	fb 01       	movw	r30, r22
  92:	0e 02       	muls	r16, r30
  94:	49 02       	muls	r20, r25
  96:	6c 02       	muls	r22, r28
  98:	92 02       	muls	r25, r18
  9a:	c0 02       	muls	r28, r16
  9c:	e8 02       	muls	r30, r24
  9e:	e8 02       	muls	r30, r24
  a0:	cb 02       	muls	r28, r27

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	ee ee       	ldi	r30, 0xEE	; 238
  b6:	f5 e0       	ldi	r31, 0x05	; 5
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a4 e0       	ldi	r26, 0x04	; 4
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a6 31       	cpi	r26, 0x16	; 22
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	28 d1       	rcall	.+592    	; 0x32a <main>
  da:	87 c2       	rjmp	.+1294   	; 0x5ea <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerISR>:
}

bool Start()
{
	return time == 0;
}
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tasksNum>
  f4:	88 23       	and	r24, r24
  f6:	09 f4       	brne	.+2      	; 0xfa <TimerISR+0x1c>
  f8:	53 c0       	rjmp	.+166    	; 0x1a0 <TimerISR+0xc2>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	1b e0       	ldi	r17, 0x0B	; 11
  fe:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <tasks>
 102:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <tasks+0x1>
 106:	18 9f       	mul	r17, r24
 108:	c0 0d       	add	r28, r0
 10a:	d1 1d       	adc	r29, r1
 10c:	11 24       	eor	r1, r1
 10e:	4d 81       	ldd	r20, Y+5	; 0x05
 110:	5e 81       	ldd	r21, Y+6	; 0x06
 112:	6f 81       	ldd	r22, Y+7	; 0x07
 114:	78 85       	ldd	r23, Y+8	; 0x08
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	ab 81       	ldd	r26, Y+3	; 0x03
 11c:	bc 81       	ldd	r27, Y+4	; 0x04
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	6a 07       	cpc	r22, r26
 124:	7b 07       	cpc	r23, r27
 126:	b0 f0       	brcs	.+44     	; 0x154 <TimerISR+0x76>
 128:	88 81       	ld	r24, Y
 12a:	e9 85       	ldd	r30, Y+9	; 0x09
 12c:	fa 85       	ldd	r31, Y+10	; 0x0a
 12e:	08 2e       	mov	r0, r24
 130:	00 0c       	add	r0, r0
 132:	99 0b       	sbc	r25, r25
 134:	09 95       	icall
 136:	88 83       	st	Y, r24
 138:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 13c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <tasks>
 140:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <tasks+0x1>
 144:	18 9f       	mul	r17, r24
 146:	e0 0d       	add	r30, r0
 148:	f1 1d       	adc	r31, r1
 14a:	11 24       	eor	r1, r1
 14c:	15 82       	std	Z+5, r1	; 0x05
 14e:	16 82       	std	Z+6, r1	; 0x06
 150:	17 82       	std	Z+7, r1	; 0x07
 152:	10 86       	std	Z+8, r1	; 0x08
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 158:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <tasks>
 15c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <tasks+0x1>
 160:	18 9f       	mul	r17, r24
 162:	e0 0d       	add	r30, r0
 164:	f1 1d       	adc	r31, r1
 166:	11 24       	eor	r1, r1
 168:	c5 80       	ldd	r12, Z+5	; 0x05
 16a:	d6 80       	ldd	r13, Z+6	; 0x06
 16c:	e7 80       	ldd	r14, Z+7	; 0x07
 16e:	f0 84       	ldd	r15, Z+8	; 0x08
 170:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 17c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 180:	4c 0d       	add	r20, r12
 182:	5d 1d       	adc	r21, r13
 184:	6e 1d       	adc	r22, r14
 186:	7f 1d       	adc	r23, r15
 188:	45 83       	std	Z+5, r20	; 0x05
 18a:	56 83       	std	Z+6, r21	; 0x06
 18c:	67 83       	std	Z+7, r22	; 0x07
 18e:	70 87       	std	Z+8, r23	; 0x08
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 196:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tasksNum>
 19a:	89 17       	cp	r24, r25
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <TimerISR+0xc2>
 19e:	af cf       	rjmp	.-162    	; 0xfe <TimerISR+0x20>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <__vector_13>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	0b b6       	in	r0, 0x3b	; 59
 1bc:	0f 92       	push	r0
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tasksPeriodCntDown>
 1da:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tasksPeriodCntDown+0x1>
 1de:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <tasksPeriodCntDown+0x2>
 1e2:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <tasksPeriodCntDown+0x3>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	a1 09       	sbc	r26, r1
 1ea:	b1 09       	sbc	r27, r1
 1ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
 1f0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
 1f4:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
 1f8:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
 1fc:	89 2b       	or	r24, r25
 1fe:	8a 2b       	or	r24, r26
 200:	8b 2b       	or	r24, r27
 202:	89 f4       	brne	.+34     	; 0x226 <__vector_13+0x76>
 204:	6c df       	rcall	.-296    	; 0xde <TimerISR>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 216:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
 21a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
 21e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
 222:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <TimerSet>:
 24c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 258:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 25c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <tasksPeriodCntDown>
 260:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <tasksPeriodCntDown+0x1>
 264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tasksPeriodCntDown+0x2>
 268:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <tasksPeriodCntDown+0x3>
 26c:	08 95       	ret

0000026e <TimerOn>:
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 286:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 28a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 29a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 29e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
 2a2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
 2a6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
 2aa:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
 2ae:	8f b7       	in	r24, 0x3f	; 63
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8f bf       	out	0x3f, r24	; 63
 2b4:	08 95       	ret

000002b6 <Timer>:
 2b6:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <time>
 2ba:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <time+0x1>
 2be:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <time+0x2>
 2c2:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <time+0x3>
 2c6:	41 15       	cp	r20, r1
 2c8:	51 05       	cpc	r21, r1
 2ca:	61 05       	cpc	r22, r1
 2cc:	71 05       	cpc	r23, r1
 2ce:	71 f4       	brne	.+28     	; 0x2ec <Timer+0x36>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time>
 2dc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <time+0x1>
 2e0:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <time+0x2>
 2e4:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <time+0x3>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	a0 e0       	ldi	r26, 0x00	; 0
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	48 17       	cp	r20, r24
 2f2:	59 07       	cpc	r21, r25
 2f4:	6a 07       	cpc	r22, r26
 2f6:	7b 07       	cpc	r23, r27
 2f8:	50 f0       	brcs	.+20     	; 0x30e <Timer+0x58>
 2fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <time>
 2fe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <time+0x1>
 302:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <time+0x2>
 306:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <time+0x3>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
 30e:	4f 5f       	subi	r20, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	6f 4f       	sbci	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <time>
 31a:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <time+0x1>
 31e:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <time+0x2>
 322:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <time+0x3>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret

0000032a <main>:
	return state;
}


int main(void)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	2b 97       	sbiw	r28, 0x0b	; 11
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; LEDOUT = 0x00; // ID LED's
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	84 b9       	out	0x04, r24	; 4
 342:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // RF Input and Output
 344:	8a b9       	out	0x0a, r24	; 10
 346:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0x00; PORTA = 0xFF; // Temp Resistor
 348:	11 b8       	out	0x01, r1	; 1
 34a:	82 b9       	out	0x02, r24	; 2
	
	//unsigned short x =ADC_read(1);
	
	LEDOUT = ID;
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	85 b9       	out	0x05, r24	; 5
	
	//Set_Clock(500);
	tasksNum = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tasksNum>
	task tsks[1];
	tasks = tsks;
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tasks+0x1>
 35e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tasks>
	
	// define tasks
	unsigned char i=0;
	tasks[i].state = Idle;
 362:	19 82       	std	Y+1, r1	; 0x01
	tasks[i].period = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	a0 e0       	ldi	r26, 0x00	; 0
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	8a 83       	std	Y+2, r24	; 0x02
 36e:	9b 83       	std	Y+3, r25	; 0x03
 370:	ac 83       	std	Y+4, r26	; 0x04
 372:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 374:	8e 83       	std	Y+6, r24	; 0x06
 376:	9f 83       	std	Y+7, r25	; 0x07
 378:	a8 87       	std	Y+8, r26	; 0x08
 37a:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Leader;
 37c:	8e ed       	ldi	r24, 0xDE	; 222
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	9b 87       	std	Y+11, r25	; 0x0b
 382:	8a 87       	std	Y+10, r24	; 0x0a
	
	TimerSet(tasks[i].period);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	5f df       	rcall	.-322    	; 0x24c <TimerSet>
	TimerOn();
 38e:	6f df       	rcall	.-290    	; 0x26e <TimerOn>
 390:	ff cf       	rjmp	.-2      	; 0x390 <main+0x66>

00000392 <read_ADC>:
 392:	ea e7       	ldi	r30, 0x7A	; 122



int read_ADC(char pin)
{
	ADCSRA = (1<<ADEN)|(1<< ADPS1)|(1<<ADPS2);
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	96 e8       	ldi	r25, 0x86	; 134
 398:	90 83       	st	Z, r25
	ADMUX = (3 << REFS0)|(1<<ADLAR)|(pin << MUX0);
 39a:	80 6e       	ori	r24, 0xE0	; 224
 39c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <read_ADC+0x10>
 3a6:	00 00       	nop
	_delay_us(10);
	ADCSRA |= (1<<ADSC);
 3a8:	80 81       	ld	r24, Z
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
 3ae:	80 81       	ld	r24, Z
 3b0:	86 fd       	sbrc	r24, 6
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <read_ADC+0x1c>
	return ADCH;
 3b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 95       	ret

000003bc <TickFct_Leader>:
void Set_Clock(int tic);
void delay_ms(int miliSec); //for 8 Mhz crystal
int read_ADC(char pin);

	
int TickFct_Leader(int state) {
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	ec 01       	movw	r28, r24
	
	
	
	switch(state) {
 3c2:	fc 01       	movw	r30, r24
 3c4:	31 96       	adiw	r30, 0x01	; 1
 3c6:	eb 30       	cpi	r30, 0x0B	; 11
 3c8:	f1 05       	cpc	r31, r1
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <TickFct_Leader+0x12>
 3cc:	01 c1       	rjmp	.+514    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 3ce:	ea 5b       	subi	r30, 0xBA	; 186
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	02 c1       	rjmp	.+516    	; 0x5d8 <__tablejump2__>
		case -1:
			state = Idle;
			Odata = 0x0000;
 3d4:	1b b8       	out	0x0b, r1	; 11
	
	
	
	switch(state) {
		case -1:
			state = Idle;
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
			Odata = 0x0000;
		break;
 3da:	fa c0       	rjmp	.+500    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		
		case Idle:
		
			Tstate = 0;
 3dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 3e0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			LEDOUT = 0x00;
 3e4:	15 b8       	out	0x05, r1	; 5
			
			///*
			if(Idata)
 3e6:	01 9b       	sbis	0x00, 1	; 0
 3e8:	f3 c0       	rjmp	.+486    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			{
				if(Timer(1))
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	63 df       	rcall	.-314    	; 0x2b6 <Timer>
	
	
	
	switch(state) {
		case -1:
			state = Idle;
 3f0:	c8 2f       	mov	r28, r24
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
 3f4:	ed c0       	rjmp	.+474    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			
		break;
		
		case Check:
			
			if(Timer(4))
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	5d df       	rcall	.-326    	; 0x2b6 <Timer>
 3fc:	88 23       	and	r24, r24
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	e7 c0       	rjmp	.+462    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			{
				if(Idata)
 402:	01 9b       	sbis	0x00, 1	; 0
 404:	da c0       	rjmp	.+436    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
				{
					data = 0x0000;
 406:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <data+0x1>
 40a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data>
					state = Store;
					Tstate = 0;
 40e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 412:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			if(Timer(4))
			{
				if(Idata)
				{
					data = 0x0000;
					state = Store;
 416:	c2 e0       	ldi	r28, 0x02	; 2
 418:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		break;
		
		case Store:
			if(Timer(4))
 41a:	da c0       	rjmp	.+436    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 41c:	84 e0       	ldi	r24, 0x04	; 4
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	4a df       	rcall	.-364    	; 0x2b6 <Timer>
 422:	88 23       	and	r24, r24
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	d4 c0       	rjmp	.+424    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			{
				if(Tstate < InstructLength)
 428:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 42c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 430:	8a 30       	cpi	r24, 0x0A	; 10
 432:	91 05       	cpc	r25, r1
 434:	d4 f4       	brge	.+52     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				{
					
					if(Idata)
 436:	01 9b       	sbis	0x00, 1	; 0
 438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
					{
						data = ((0x0001 << (Tstate))) | data;
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	08 2e       	mov	r0, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <data>
 44e:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <data+0x1>
 452:	24 2b       	or	r18, r20
 454:	35 2b       	or	r19, r21
 456:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <data+0x1>
 45a:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <data>
					}
					
					++Tstate;
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 464:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
 468:	b3 c0       	rjmp	.+358    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
					
				}
				else if(Idata)
 46a:	01 9b       	sbis	0x00, 1	; 0
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				{
					
					state = CheckTask;
					Tstate = 0;
 46e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 472:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
					
				}
				else if(Idata)
				{
					
					state = CheckTask;
 476:	c3 e0       	ldi	r28, 0x03	; 3
 478:	d0 e0       	ldi	r29, 0x00	; 0
 47a:	aa c0       	rjmp	.+340    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
					Tstate = 0;
					
				}
				else
				{
					data = 0x0000;
 47c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <data+0x1>
 480:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data>
					state = Idle;
					Tstate = 0;
 484:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 488:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
					
				}
				else
				{
					data = 0x0000;
					state = Idle;
 48c:	c0 e0       	ldi	r28, 0x00	; 0
 48e:	d0 e0       	ldi	r29, 0x00	; 0
 490:	9f c0       	rjmp	.+318    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		case CheckTask:
		
			Tstate = 0;
 492:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 496:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			if(data == 0x00)
 49a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 49e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <data+0x1>
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a6:	8c c0       	rjmp	.+280    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				//	10  -  sync request
				//	11  -  sync response
				
				//if((((data & 0x0003) > 0x0002)) && (data > 0x00FF) && ((data) < 0x0200))
				
				if( ((data & 0x0300) == 0x0100) && ((data & 0x000f) == ID))
 4a8:	9c 01       	movw	r18, r24
 4aa:	22 27       	eor	r18, r18
 4ac:	33 70       	andi	r19, 0x03	; 3
 4ae:	21 15       	cp	r18, r1
 4b0:	31 40       	sbci	r19, 0x01	; 1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	88 c0       	rjmp	.+272    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 4b6:	9c 01       	movw	r18, r24
 4b8:	2f 70       	andi	r18, 0x0F	; 15
 4ba:	33 27       	eor	r19, r19
 4bc:	22 30       	cpi	r18, 0x02	; 2
 4be:	31 05       	cpc	r19, r1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
					//state = Gtemp;
					
					//state = StartSend;
					
					
					LEDOUT = data;
 4c2:	84 c0       	rjmp	.+264    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
					
					if(Timer(300))
 4c4:	85 b9       	out	0x05, r24	; 5
 4c6:	8c e2       	ldi	r24, 0x2C	; 44
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	f5 de       	rcall	.-534    	; 0x2b6 <Timer>
 4cc:	88 23       	and	r24, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	7f c0       	rjmp	.+254    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
					{
						//state = Idle;
						state = Gtemp;
 4d2:	c9 e0       	ldi	r28, 0x09	; 9
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
			
		break;
		
		case StartSend:
			
			Odata = 0x0001;
 4d6:	7c c0       	rjmp	.+248    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 4d8:	81 e0       	ldi	r24, 0x01	; 1
			if(Timer(4))
 4da:	8b b9       	out	0x0b, r24	; 11
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	ea de       	rcall	.-556    	; 0x2b6 <Timer>
 4e2:	88 23       	and	r24, r24
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	74 c0       	rjmp	.+232    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			{
				if(Tstate < 1)
 4e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 4ec:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 4f0:	18 16       	cp	r1, r24
 4f2:	19 06       	cpc	r1, r25
 4f4:	34 f0       	brlt	.+12     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
				{
					++Tstate;
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 4fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
 500:	67 c0       	rjmp	.+206    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
				}
				else
				{
					state = Send;
					Tstate = 0;
 502:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 506:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
					
					if(((data) & 0x0001) == 0x0001)
 50a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 50e:	80 ff       	sbrs	r24, 0
 510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
					{
						Odata = 0x0001;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	8b b9       	out	0x0b, r24	; 11
				{
					++Tstate;
				}
				else
				{
					state = Send;
 516:	c5 e0       	ldi	r28, 0x05	; 5
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	5a c0       	rjmp	.+180    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 51c:	1b b8       	out	0x0b, r1	; 11
 51e:	c5 e0       	ldi	r28, 0x05	; 5
 520:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;
		
		case Send:
		
			if(Timer(4))
 522:	56 c0       	rjmp	.+172    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	c6 de       	rcall	.-628    	; 0x2b6 <Timer>
 52a:	88 23       	and	r24, r24
 52c:	e1 f0       	breq	.+56     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
			{
				
				if(Tstate < InstructLength)
 52e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 532:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 536:	8a 30       	cpi	r24, 0x0A	; 10
 538:	91 05       	cpc	r25, r1
 53a:	dc f4       	brge	.+54     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
				{
					++Tstate;
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 542:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
					if(((data >> (Tstate)) & 0x0001) == 0x0001)
 546:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <data>
 54a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <data+0x1>
 54e:	a9 01       	movw	r20, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 552:	55 95       	asr	r21
 554:	47 95       	ror	r20
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 55a:	40 ff       	sbrs	r20, 0
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
					{
						Odata = 0x0001;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	8b b9       	out	0x0b, r24	; 11
 562:	01 c0       	rjmp	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
					}
					else
					{
						Odata = 0x0000;
 564:	1b b8       	out	0x0b, r1	; 11
					
				}
				
			}
			
			if(Tstate >= InstructLength)
 566:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 56a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 56e:	0a 97       	sbiw	r24, 0x0a	; 10
 570:	7c f1       	brlt	.+94     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			{
				Tstate = 0;
 572:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 576:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
				state = EndSend;
 57a:	c6 e0       	ldi	r28, 0x06	; 6
 57c:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;
		
		case EndSend:
			Odata = 0x0001;
 57e:	28 c0       	rjmp	.+80     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 580:	81 e0       	ldi	r24, 0x01	; 1
			if(Timer(4))
 582:	8b b9       	out	0x0b, r24	; 11
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	96 de       	rcall	.-724    	; 0x2b6 <Timer>
 58a:	88 23       	and	r24, r24
			{
				state = Idle;
				//state = -1;
				Odata = 0x0000;
 58c:	09 f1       	breq	.+66     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		
		case EndSend:
			Odata = 0x0001;
			if(Timer(4))
			{
				state = Idle;
 58e:	1b b8       	out	0x0b, r1	; 11
 590:	c0 e0       	ldi	r28, 0x00	; 0
 592:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		
		
		
		case Gtemp:
			TempTem = read_ADC(0);
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	fc de       	rcall	.-520    	; 0x392 <read_ADC>
 59a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <TempTem+0x1>
 59e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TempTem>
			data = ((0x00FF) & TempTem);
 5a2:	99 27       	eor	r25, r25
 5a4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <data+0x1>
 5a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <data>
			//data = 0x0045;
			Tstate = 0;
 5ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 5b0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			state = StartSend;
 5b4:	c4 e0       	ldi	r28, 0x04	; 4
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
		
		break;
 5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
					state = Store;
					Tstate = 0;
				}
				else
				{
					state = Idle;
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		case CheckTask:
		
			Tstate = 0;
			if(data == 0x00)
			{
				state = Idle;
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
 5c2:	d0 e0       	ldi	r29, 0x00	; 0
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
						//state = StartSend;
					}
				}
				else
				{
					state = Idle;
 5c6:	c0 e0       	ldi	r28, 0x00	; 0
 5c8:	d0 e0       	ldi	r29, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
 5ce:	d0 e0       	ldi	r29, 0x00	; 0


	

	return state;
}
 5d0:	ce 01       	movw	r24, r28
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <__tablejump2__>:
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	00 24       	eor	r0, r0
 5de:	00 1c       	adc	r0, r0
 5e0:	0b be       	out	0x3b, r0	; 59
 5e2:	07 90       	elpm	r0, Z+
 5e4:	f6 91       	elpm	r31, Z
 5e6:	e0 2d       	mov	r30, r0
 5e8:	09 94       	ijmp

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
