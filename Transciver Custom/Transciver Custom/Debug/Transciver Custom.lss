
Transciver Custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005a2  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c73  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c2  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004df  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d0 01       	movw	r26, r0
  8e:	d4 01       	movw	r26, r8
  90:	e0 01       	movw	r28, r0
  92:	f3 01       	movw	r30, r6
  94:	2a 02       	muls	r18, r26
  96:	4d 02       	muls	r20, r29
  98:	73 02       	muls	r23, r19
  9a:	a1 02       	muls	r26, r17
  9c:	c2 02       	muls	r28, r18
  9e:	c2 02       	muls	r28, r18
  a0:	ac 02       	muls	r26, r28

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e2 ea       	ldi	r30, 0xA2	; 162
  b6:	f5 e0       	ldi	r31, 0x05	; 5
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a4 e0       	ldi	r26, 0x04	; 4
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a4 31       	cpi	r26, 0x14	; 20
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e d1       	rcall	.+540    	; 0x2f6 <main>
  da:	61 c2       	rjmp	.+1218   	; 0x59e <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerISR>:


void setupADC()
{
	ADMUX=(1<<REFS0);
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tasksNum>
  f4:	88 23       	and	r24, r24
  f6:	09 f4       	brne	.+2      	; 0xfa <TimerISR+0x1c>
  f8:	53 c0       	rjmp	.+166    	; 0x1a0 <TimerISR+0xc2>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	1b e0       	ldi	r17, 0x0B	; 11
  fe:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <tasks>
 102:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <tasks+0x1>
 106:	18 9f       	mul	r17, r24
 108:	c0 0d       	add	r28, r0
 10a:	d1 1d       	adc	r29, r1
 10c:	11 24       	eor	r1, r1
 10e:	4d 81       	ldd	r20, Y+5	; 0x05
 110:	5e 81       	ldd	r21, Y+6	; 0x06
 112:	6f 81       	ldd	r22, Y+7	; 0x07
 114:	78 85       	ldd	r23, Y+8	; 0x08
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	ab 81       	ldd	r26, Y+3	; 0x03
 11c:	bc 81       	ldd	r27, Y+4	; 0x04
 11e:	48 17       	cp	r20, r24
 120:	59 07       	cpc	r21, r25
 122:	6a 07       	cpc	r22, r26
 124:	7b 07       	cpc	r23, r27
 126:	b0 f0       	brcs	.+44     	; 0x154 <TimerISR+0x76>
 128:	88 81       	ld	r24, Y
 12a:	e9 85       	ldd	r30, Y+9	; 0x09
 12c:	fa 85       	ldd	r31, Y+10	; 0x0a
 12e:	08 2e       	mov	r0, r24
 130:	00 0c       	add	r0, r0
 132:	99 0b       	sbc	r25, r25
 134:	09 95       	icall
 136:	88 83       	st	Y, r24
 138:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 13c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 140:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 144:	18 9f       	mul	r17, r24
 146:	e0 0d       	add	r30, r0
 148:	f1 1d       	adc	r31, r1
 14a:	11 24       	eor	r1, r1
 14c:	15 82       	std	Z+5, r1	; 0x05
 14e:	16 82       	std	Z+6, r1	; 0x06
 150:	17 82       	std	Z+7, r1	; 0x07
 152:	10 86       	std	Z+8, r1	; 0x08
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 158:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 15c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 160:	18 9f       	mul	r17, r24
 162:	e0 0d       	add	r30, r0
 164:	f1 1d       	adc	r31, r1
 166:	11 24       	eor	r1, r1
 168:	c5 80       	ldd	r12, Z+5	; 0x05
 16a:	d6 80       	ldd	r13, Z+6	; 0x06
 16c:	e7 80       	ldd	r14, Z+7	; 0x07
 16e:	f0 84       	ldd	r15, Z+8	; 0x08
 170:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 17c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 180:	4c 0d       	add	r20, r12
 182:	5d 1d       	adc	r21, r13
 184:	6e 1d       	adc	r22, r14
 186:	7f 1d       	adc	r23, r15
 188:	45 83       	std	Z+5, r20	; 0x05
 18a:	56 83       	std	Z+6, r21	; 0x06
 18c:	67 83       	std	Z+7, r22	; 0x07
 18e:	70 87       	std	Z+8, r23	; 0x08
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 196:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tasksNum>
 19a:	89 17       	cp	r24, r25
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <TimerISR+0xc2>
 19e:	af cf       	rjmp	.-162    	; 0xfe <TimerISR+0x20>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <__vector_13>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	0b b6       	in	r0, 0x3b	; 59
 1bc:	0f 92       	push	r0
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tasksPeriodCntDown>
 1da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tasksPeriodCntDown+0x1>
 1de:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <tasksPeriodCntDown+0x2>
 1e2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <tasksPeriodCntDown+0x3>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	a1 09       	sbc	r26, r1
 1ea:	b1 09       	sbc	r27, r1
 1ec:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 1f0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 1f4:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 1f8:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
 1fc:	89 2b       	or	r24, r25
 1fe:	8a 2b       	or	r24, r26
 200:	8b 2b       	or	r24, r27
 202:	89 f4       	brne	.+34     	; 0x226 <__vector_13+0x76>
 204:	6c df       	rcall	.-296    	; 0xde <TimerISR>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 216:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 21a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 21e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 222:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <TimerSet>:
 24c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 258:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 25c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <tasksPeriodCntDown>
 260:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <tasksPeriodCntDown+0x1>
 264:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown+0x2>
 268:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x3>
 26c:	08 95       	ret

0000026e <TimerOn>:
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 286:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 28a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 29a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 29e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 2a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 2a6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 2aa:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
 2ae:	8f b7       	in	r24, 0x3f	; 63
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8f bf       	out	0x3f, r24	; 63
 2b4:	08 95       	ret

000002b6 <Timer>:
 2b6:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <time>
 2ba:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <time+0x1>
 2be:	21 15       	cp	r18, r1
 2c0:	31 05       	cpc	r19, r1
 2c2:	41 f4       	brne	.+16     	; 0x2d4 <Timer+0x1e>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <time+0x1>
 2cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <Timer+0x30>
 2da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <time+0x1>
 2de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <time>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	08 95       	ret
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <time+0x1>
 2ee:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <time>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <main>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	2b 97       	sbiw	r28, 0x0b	; 11
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 b9       	out	0x04, r24	; 4
 30e:	15 b8       	out	0x05, r1	; 5
 310:	8a b9       	out	0x0a, r24	; 10
 312:	1b b8       	out	0x0b, r1	; 11
 314:	11 b8       	out	0x01, r1	; 1
 316:	82 b9       	out	0x02, r24	; 2
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	85 b9       	out	0x05, r24	; 5
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tasksNum>
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <tasks+0x1>
 32a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tasks>
 32e:	19 82       	std	Y+1, r1	; 0x01
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	a0 e0       	ldi	r26, 0x00	; 0
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	8a 83       	std	Y+2, r24	; 0x02
 33a:	9b 83       	std	Y+3, r25	; 0x03
 33c:	ac 83       	std	Y+4, r26	; 0x04
 33e:	bd 83       	std	Y+5, r27	; 0x05
 340:	8e 83       	std	Y+6, r24	; 0x06
 342:	9f 83       	std	Y+7, r25	; 0x07
 344:	a8 87       	std	Y+8, r26	; 0x08
 346:	b9 87       	std	Y+9, r27	; 0x09
 348:	84 ec       	ldi	r24, 0xC4	; 196
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	9b 87       	std	Y+11, r25	; 0x0b
 34e:	8a 87       	std	Y+10, r24	; 0x0a
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	79 df       	rcall	.-270    	; 0x24c <TimerSet>
 35a:	89 df       	rcall	.-238    	; 0x26e <TimerOn>
 35c:	ff cf       	rjmp	.-2      	; 0x35c <main+0x66>

0000035e <ADC_read>:
int ADC_read(int ch)
{
	// select the corresponding channel 0~7
	//int ADC_result=0;
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;
 35e:	ec e7       	ldi	r30, 0x7C	; 124
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 81       	ld	r18, Z
 364:	28 7f       	andi	r18, 0xF8	; 248
 366:	87 70       	andi	r24, 0x07	; 7
 368:	99 27       	eor	r25, r25
 36a:	82 2b       	or	r24, r18
 36c:	80 83       	st	Z, r24

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 36e:	ea e7       	ldi	r30, 0x7A	; 122
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	80 64       	ori	r24, 0x40	; 64
 376:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes '0' again
	
	while(ADCSRA & (1<<ADSC));
 378:	80 81       	ld	r24, Z
 37a:	86 fd       	sbrc	r24, 6
 37c:	fd cf       	rjmp	.-6      	; 0x378 <ADC_read+0x1a>
	//ADC_result=ADCL;
	//ADC_result |=(ADC<<8);
	return (ADC);
 37e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 382:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 386:	08 95       	ret

00000388 <TickFct_Leader>:
void delay_ms(int miliSec); //for 8 Mhz crystal
void setupADC();
int ADC_read(int ch);

	
int TickFct_Leader(int state) {
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
	
	
	
	switch(state) {
 38e:	fc 01       	movw	r30, r24
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	eb 30       	cpi	r30, 0x0B	; 11
 394:	f1 05       	cpc	r31, r1
 396:	08 f0       	brcs	.+2      	; 0x39a <TickFct_Leader+0x12>
 398:	f5 c0       	rjmp	.+490    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 39a:	ea 5b       	subi	r30, 0xBA	; 186
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	f6 c0       	rjmp	.+492    	; 0x58c <__tablejump2__>
		case -1:
			state = Idle;
			Odata = 0x0000;
 3a0:	1b b8       	out	0x0b, r1	; 11
	
	
	
	switch(state) {
		case -1:
			state = Idle;
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
			Odata = 0x0000;
		break;
 3a6:	ee c0       	rjmp	.+476    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			//data = 0x02;
			//data = 0x50;
			//data = 0x12;
			//data = 'A';
			//data = 'z';
			Tstate = 0;
 3a8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 3ac:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			
			//LEDOUT = data;
			
			
			///*
			if(Idata)
 3b0:	00 9b       	sbis	0x00, 0	; 0
 3b2:	e8 c0       	rjmp	.+464    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				if(Timer(1))
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	7e df       	rcall	.-260    	; 0x2b6 <Timer>
	
	
	
	switch(state) {
		case -1:
			state = Idle;
 3ba:	c8 2f       	mov	r28, r24
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
 3be:	e2 c0       	rjmp	.+452    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			} //*/
		break;
		
		case Check:
			
			if(Timer(4))
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	78 df       	rcall	.-272    	; 0x2b6 <Timer>
 3c6:	88 23       	and	r24, r24
 3c8:	09 f4       	brne	.+2      	; 0x3cc <TickFct_Leader+0x44>
 3ca:	dc c0       	rjmp	.+440    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				if(Idata)
 3cc:	00 9b       	sbis	0x00, 0	; 0
 3ce:	d2 c0       	rjmp	.+420    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
				{
					data = 0x0000;
 3d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <data+0x1>
 3d4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data>
					state = Store;
					Tstate = 0;
 3d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 3dc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			if(Timer(4))
			{
				if(Idata)
				{
					data = 0x0000;
					state = Store;
 3e0:	c2 e0       	ldi	r28, 0x02	; 2
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		break;
		
		case Store:
			if(Timer(4))
 3e4:	cf c0       	rjmp	.+414    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	65 df       	rcall	.-310    	; 0x2b6 <Timer>
 3ec:	88 23       	and	r24, r24
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <TickFct_Leader+0x6a>
 3f0:	c9 c0       	rjmp	.+402    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				if(Tstate < InstructLength)
 3f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 3f6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 3fa:	8a 30       	cpi	r24, 0x0A	; 10
 3fc:	91 05       	cpc	r25, r1
 3fe:	d4 f4       	brge	.+52     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				{
					
					if(Idata)
 400:	00 9b       	sbis	0x00, 0	; 0
 402:	12 c0       	rjmp	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					{
						data = ((0x0001 << (Tstate))) | data;
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	08 2e       	mov	r0, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <data>
 418:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <data+0x1>
 41c:	24 2b       	or	r18, r20
 41e:	35 2b       	or	r19, r21
 420:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <data+0x1>
 424:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <data>
					}
					
					++Tstate;
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 42e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
 432:	a8 c0       	rjmp	.+336    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					
				}
				else if(Idata)
 434:	00 9b       	sbis	0x00, 0	; 0
 436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				{
					
					state = CheckTask;
					//state = StartSend;
					Tstate = 0;
 438:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 43c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
					
				}
				else if(Idata)
				{
					
					state = CheckTask;
 440:	c3 e0       	ldi	r28, 0x03	; 3
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	9f c0       	rjmp	.+318    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					//LEDOUT = (data >> 2);
					//LEDOUT = ID;
				}
				else
				{
					data = 0x0000;
 446:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <data+0x1>
 44a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data>
					state = Idle;
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	98 c0       	rjmp	.+304    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		
		
		
		case CheckTask:
		
			Tstate = 0;
 454:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 458:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			if(data == 0x00)
 45c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 460:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <data+0x1>
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	88 c0       	rjmp	.+272    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
				//if(true)
				//if(((data & 0x0300) == 0x00) && ((data & (0x03FC)) == 0x00) )// 00
				//if(((data & 0x0300) == 0x00) && ((data & (ID ^ 0x03FF)) == 0x00) )// 00
				//if(true)
				
				if((((data) & 0x0103) == (0x0100 | ID)))
 46a:	9c 01       	movw	r18, r24
 46c:	23 70       	andi	r18, 0x03	; 3
 46e:	31 70       	andi	r19, 0x01	; 1
 470:	23 30       	cpi	r18, 0x03	; 3
 472:	31 40       	sbci	r19, 0x01	; 1
 474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	84 c0       	rjmp	.+264    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
					//data = (0x0300 & data);
					state = Gtemp;
					
					
				}
				else if(((data & 0x0300) == 0x0200) && ((PINA & 0x04) == 0x04))// 10
 478:	88 27       	eor	r24, r24
 47a:	93 70       	andi	r25, 0x03	; 3
 47c:	81 15       	cp	r24, r1
 47e:	92 40       	sbci	r25, 0x02	; 2
 480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	80 c0       	rjmp	.+256    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 484:	02 9b       	sbis	0x00, 2	; 0
 486:	7e c0       	rjmp	.+252    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				{
					data = (0x0300 | ID);
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	93 e0       	ldi	r25, 0x03	; 3
 48c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <data+0x1>
 490:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <data>
					state = StartSend;
 494:	c4 e0       	ldi	r28, 0x04	; 4
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	75 c0       	rjmp	.+234    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			
		break;
		
		case StartSend:
			
			Odata = 0x0001;
 49a:	81 e0       	ldi	r24, 0x01	; 1
			if(Timer(4))
 49c:	8b b9       	out	0x0b, r24	; 11
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	09 df       	rcall	.-494    	; 0x2b6 <Timer>
 4a4:	88 23       	and	r24, r24
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	6d c0       	rjmp	.+218    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				if(Tstate < 1)
 4aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 4ae:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 4b2:	18 16       	cp	r1, r24
 4b4:	19 06       	cpc	r1, r25
 4b6:	34 f0       	brlt	.+12     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				{
					++Tstate;
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 4be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
 4c2:	60 c0       	rjmp	.+192    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				}
				else
				{
					state = Send;
					Tstate = 0;
 4c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 4c8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
					//Odata = 0x00;
					
					if(((data) & 0x0001) == 0x0001)
 4cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data>
 4d0:	80 ff       	sbrs	r24, 0
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					{
						Odata = 0x0001;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	8b b9       	out	0x0b, r24	; 11
				{
					++Tstate;
				}
				else
				{
					state = Send;
 4d8:	c5 e0       	ldi	r28, 0x05	; 5
 4da:	d0 e0       	ldi	r29, 0x00	; 0
 4dc:	53 c0       	rjmp	.+166    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					{
						Odata = 0x0001;
					}
					else
					{
						Odata = 0x0000;
 4de:	1b b8       	out	0x0b, r1	; 11
				{
					++Tstate;
				}
				else
				{
					state = Send;
 4e0:	c5 e0       	ldi	r28, 0x05	; 5
 4e2:	d0 e0       	ldi	r29, 0x00	; 0
		
		case Send:
			
			//Odata = 0x00;
			
			if(Timer(4))
 4e4:	4f c0       	rjmp	.+158    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	e5 de       	rcall	.-566    	; 0x2b6 <Timer>
 4ec:	88 23       	and	r24, r24
 4ee:	e1 f0       	breq	.+56     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			{
				
				if(Tstate < InstructLength)
 4f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 4f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 4f8:	8a 30       	cpi	r24, 0x0A	; 10
 4fa:	91 05       	cpc	r25, r1
 4fc:	dc f4       	brge	.+54     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
				{
					//Odata = (data >> (Tstate)) & 0x02;
					++Tstate;
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Tstate+0x1>
 504:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Tstate>
					if(((data >> (Tstate)) & 0x0001) == 0x0001)
 508:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <data>
 50c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <data+0x1>
 510:	a9 01       	movw	r20, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 51c:	40 ff       	sbrs	r20, 0
 51e:	03 c0       	rjmp	.+6      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
					{
						Odata = 0x0001;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	8b b9       	out	0x0b, r24	; 11
 524:	01 c0       	rjmp	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
					}
					else
					{
						Odata = 0x0000;
 526:	1b b8       	out	0x0b, r1	; 11
					
				}
				
			}
			
			if(Tstate >= InstructLength)
 528:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Tstate>
 52c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Tstate+0x1>
 530:	0a 97       	sbiw	r24, 0x0a	; 10
 532:	44 f1       	brlt	.+80     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				Tstate = 0;
 534:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 538:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
				state = EndSend;
 53c:	c6 e0       	ldi	r28, 0x06	; 6
 53e:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;
		
		case EndSend:
			Odata = 0x0001;
 540:	21 c0       	rjmp	.+66     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 542:	81 e0       	ldi	r24, 0x01	; 1
			if(Timer(4))
 544:	8b b9       	out	0x0b, r24	; 11
 546:	84 e0       	ldi	r24, 0x04	; 4
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	b5 de       	rcall	.-662    	; 0x2b6 <Timer>
 54c:	88 23       	and	r24, r24
			{
				state = Idle;
				Odata = 0x0000;
 54e:	d1 f0       	breq	.+52     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		
		case EndSend:
			Odata = 0x0001;
			if(Timer(4))
			{
				state = Idle;
 550:	1b b8       	out	0x0b, r1	; 11
 552:	c0 e0       	ldi	r28, 0x00	; 0
 554:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		
		
		
		case Gtemp:
			TempTem = ADC_read(0x01);
 556:	16 c0       	rjmp	.+44     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	00 df       	rcall	.-512    	; 0x35e <ADC_read>
 55e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TempTem+0x1>
 562:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TempTem>
			//data = ((0x0100) | TempTem);
			//data = 0x0045;
			Tstate = 0;
 566:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Tstate+0x1>
 56a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Tstate>
			state = StartSend;
 56e:	c4 e0       	ldi	r28, 0x04	; 4
 570:	d0 e0       	ldi	r29, 0x00	; 0
		
		break;
 572:	08 c0       	rjmp	.+16     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					state = Store;
					Tstate = 0;
				}
				else
				{
					state = Idle;
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	d0 e0       	ldi	r29, 0x00	; 0
 578:	05 c0       	rjmp	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		case CheckTask:
		
			Tstate = 0;
			if(data == 0x00)
			{
				state = Idle;
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				
				if((((data) & 0x0103) == (0x0100 | ID)))
				{
					//LEDOUT = ID;
					//data = (0x0300 & data);
					state = Gtemp;
 580:	c9 e0       	ldi	r28, 0x09	; 9
 582:	d0 e0       	ldi	r29, 0x00	; 0


	

	return state;
}
 584:	ce 01       	movw	r24, r28
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <__tablejump2__>:
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	00 24       	eor	r0, r0
 592:	00 1c       	adc	r0, r0
 594:	0b be       	out	0x3b, r0	; 59
 596:	07 90       	elpm	r0, Z+
 598:	f6 91       	elpm	r31, Z
 59a:	e0 2d       	mov	r30, r0
 59c:	09 94       	ijmp

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
