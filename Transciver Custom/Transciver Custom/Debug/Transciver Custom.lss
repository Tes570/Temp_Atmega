
Transciver Custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4e  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e4  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000207  00000000  00000000  00002219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c1       	rjmp	.+646    	; 0x2bc <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d1       	rcall	.+766    	; 0x3c2 <main>
  c4:	b0 c1       	rjmp	.+864    	; 0x426 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TickFct_Leader>:
unsigned long Total = 0;

void Set_Clock(int tic);
	
int TickFct_Leader(int state) {
	switch(state) {
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	69 f0       	breq	.+26     	; 0xe6 <TickFct_Leader+0x1e>
  cc:	2c f4       	brge	.+10     	; 0xd8 <TickFct_Leader+0x10>
  ce:	8f 3f       	cpi	r24, 0xFF	; 255
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	92 07       	cpc	r25, r18
  d4:	e1 f1       	breq	.+120    	; 0x14e <TickFct_Leader+0x86>
  d6:	24 c0       	rjmp	.+72     	; 0x120 <TickFct_Leader+0x58>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	91 f0       	breq	.+36     	; 0x102 <TickFct_Leader+0x3a>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	79 f1       	breq	.+94     	; 0x142 <TickFct_Leader+0x7a>
  e4:	1d c0       	rjmp	.+58     	; 0x120 <TickFct_Leader+0x58>
		case -1:
			state = Leader_Output;
		break;
		
		case Leader_Output:
			if(Total >= 50)
  e6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Total>
  ea:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Total+0x1>
  ee:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Total+0x2>
  f2:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Total+0x3>
  f6:	c2 97       	sbiw	r24, 0x32	; 50
  f8:	a1 05       	cpc	r26, r1
  fa:	b1 05       	cpc	r27, r1
  fc:	08 f0       	brcs	.+2      	; 0x100 <TickFct_Leader+0x38>
  fe:	47 c0       	rjmp	.+142    	; 0x18e <TickFct_Leader+0xc6>
 100:	26 c0       	rjmp	.+76     	; 0x14e <TickFct_Leader+0x86>
				state = Hold;
			}
		break;
		
		case Hold:
			if(Total >= 1000)
 102:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Total>
 106:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Total+0x1>
 10a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Total+0x2>
 10e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Total+0x3>
 112:	88 3e       	cpi	r24, 0xE8	; 232
 114:	93 40       	sbci	r25, 0x03	; 3
 116:	a1 05       	cpc	r26, r1
 118:	b1 05       	cpc	r27, r1
 11a:	08 f0       	brcs	.+2      	; 0x11e <TickFct_Leader+0x56>
 11c:	54 c0       	rjmp	.+168    	; 0x1c6 <TickFct_Leader+0xfe>
 11e:	37 c0       	rjmp	.+110    	; 0x18e <TickFct_Leader+0xc6>
		case Stop:
			state = -1;
		break;
	}

	switch(state) {
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	a9 f0       	breq	.+42     	; 0x14e <TickFct_Leader+0x86>
 124:	34 f4       	brge	.+12     	; 0x132 <TickFct_Leader+0x6a>
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	92 07       	cpc	r25, r18
 12c:	09 f0       	breq	.+2      	; 0x130 <TickFct_Leader+0x68>
 12e:	5c c0       	rjmp	.+184    	; 0x1e8 <TickFct_Leader+0x120>
 130:	08 c0       	rjmp	.+16     	; 0x142 <TickFct_Leader+0x7a>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	91 05       	cpc	r25, r1
 136:	59 f1       	breq	.+86     	; 0x18e <TickFct_Leader+0xc6>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	91 05       	cpc	r25, r1
 13c:	09 f0       	breq	.+2      	; 0x140 <TickFct_Leader+0x78>
 13e:	54 c0       	rjmp	.+168    	; 0x1e8 <TickFct_Leader+0x120>
 140:	42 c0       	rjmp	.+132    	; 0x1c6 <TickFct_Leader+0xfe>
		case -1:
			//Set_Clock(500);
			temp = 0x02;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	08 95       	ret
		
		case Leader_Output:
		
			temp ^= 0x02;
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	89 27       	eor	r24, r25
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = temp;
 15a:	8b b9       	out	0x0b, r24	; 11
			PORTA = temp;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	82 b9       	out	0x02, r24	; 2
			Total += 1;
 162:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Total>
 166:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Total+0x1>
 16a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Total+0x2>
 16e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Total+0x3>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	a1 1d       	adc	r26, r1
 176:	b1 1d       	adc	r27, r1
 178:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Total>
 17c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Total+0x1>
 180:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <Total+0x2>
 184:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <Total+0x3>
		
		break;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
		
		case Hold:
			Total += 1;
 18e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Total>
 192:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Total+0x1>
 196:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Total+0x2>
 19a:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Total+0x3>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	a1 1d       	adc	r26, r1
 1a2:	b1 1d       	adc	r27, r1
 1a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Total>
 1a8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Total+0x1>
 1ac:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <Total+0x2>
 1b0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <Total+0x3>
			temp = 0x00;
 1b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = temp;
 1b8:	1b b8       	out	0x0b, r1	; 11
			PORTA = temp;
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1be:	82 b9       	out	0x02, r24	; 2
		break;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
		
		case Stop:
			Total = 0;
 1c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Total>
 1ca:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Total+0x1>
 1ce:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Total+0x2>
 1d2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Total+0x3>
			temp = 0x02;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = temp;
 1dc:	8b b9       	out	0x0b, r24	; 11
			PORTA = temp;
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	82 b9       	out	0x02, r24	; 2
			//Set_Clock(100);
		break;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
		
	}

	return state;
}
 1e8:	08 95       	ret

000001ea <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 1f8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 1fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tasksNum>
 200:	88 23       	and	r24, r24
 202:	09 f4       	brne	.+2      	; 0x206 <TimerISR+0x1c>
 204:	53 c0       	rjmp	.+166    	; 0x2ac <TimerISR+0xc2>
 206:	80 e0       	ldi	r24, 0x00	; 0
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 208:	1b e0       	ldi	r17, 0x0B	; 11
 20a:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <tasks>
 20e:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <tasks+0x1>
 212:	18 9f       	mul	r17, r24
 214:	c0 0d       	add	r28, r0
 216:	d1 1d       	adc	r29, r1
 218:	11 24       	eor	r1, r1
 21a:	4d 81       	ldd	r20, Y+5	; 0x05
 21c:	5e 81       	ldd	r21, Y+6	; 0x06
 21e:	6f 81       	ldd	r22, Y+7	; 0x07
 220:	78 85       	ldd	r23, Y+8	; 0x08
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	48 17       	cp	r20, r24
 22c:	59 07       	cpc	r21, r25
 22e:	6a 07       	cpc	r22, r26
 230:	7b 07       	cpc	r23, r27
 232:	b0 f0       	brcs	.+44     	; 0x260 <TimerISR+0x76>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 234:	88 81       	ld	r24, Y
 236:	e9 85       	ldd	r30, Y+9	; 0x09
 238:	fa 85       	ldd	r31, Y+10	; 0x0a
 23a:	08 2e       	mov	r0, r24
 23c:	00 0c       	add	r0, r0
 23e:	99 0b       	sbc	r25, r25
 240:	09 95       	icall
 242:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 244:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 248:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 24c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 250:	18 9f       	mul	r17, r24
 252:	e0 0d       	add	r30, r0
 254:	f1 1d       	adc	r31, r1
 256:	11 24       	eor	r1, r1
 258:	15 82       	std	Z+5, r1	; 0x05
 25a:	16 82       	std	Z+6, r1	; 0x06
 25c:	17 82       	std	Z+7, r1	; 0x07
 25e:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 260:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 264:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <tasks>
 268:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <tasks+0x1>
 26c:	18 9f       	mul	r17, r24
 26e:	e0 0d       	add	r30, r0
 270:	f1 1d       	adc	r31, r1
 272:	11 24       	eor	r1, r1
 274:	c5 80       	ldd	r12, Z+5	; 0x05
 276:	d6 80       	ldd	r13, Z+6	; 0x06
 278:	e7 80       	ldd	r14, Z+7	; 0x07
 27a:	f0 84       	ldd	r15, Z+8	; 0x08
 27c:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <tasksPeriodGCD>
 280:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 284:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 288:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 28c:	4c 0d       	add	r20, r12
 28e:	5d 1d       	adc	r21, r13
 290:	6e 1d       	adc	r22, r14
 292:	7f 1d       	adc	r23, r15
 294:	45 83       	std	Z+5, r20	; 0x05
 296:	56 83       	std	Z+6, r21	; 0x06
 298:	67 83       	std	Z+7, r22	; 0x07
 29a:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <tasksNum>
 2a6:	89 17       	cp	r24, r25
 2a8:	08 f4       	brcc	.+2      	; 0x2ac <TimerISR+0xc2>
 2aa:	af cf       	rjmp	.-162    	; 0x20a <TimerISR+0x20>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	0b b6       	in	r0, 0x3b	; 59
 2c8:	0f 92       	push	r0
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 2e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tasksPeriodCntDown>
 2e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tasksPeriodCntDown+0x1>
 2ea:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <tasksPeriodCntDown+0x2>
 2ee:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <tasksPeriodCntDown+0x3>
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	a1 09       	sbc	r26, r1
 2f6:	b1 09       	sbc	r27, r1
 2f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 2fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 300:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 304:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 308:	89 2b       	or	r24, r25
 30a:	8a 2b       	or	r24, r26
 30c:	8b 2b       	or	r24, r27
 30e:	89 f4       	brne	.+34     	; 0x332 <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 310:	6c df       	rcall	.-296    	; 0x1ea <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 312:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 316:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 31a:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 31e:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 322:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 326:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 32a:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 32e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>
	}
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 358:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <tasksPeriodGCD>
 35c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <tasksPeriodGCD+0x1>
 360:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasksPeriodGCD+0x2>
 364:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <tasksPeriodGCD+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 368:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <tasksPeriodCntDown>
 36c:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <tasksPeriodCntDown+0x1>
 370:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown+0x2>
 374:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x3>
 378:	08 95       	ret

0000037a <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	//OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A

	OCR1A 	= 30;	// Timer interrupt will be generated when TCNT1==OCR1A
 380:	8e e1       	ldi	r24, 0x1E	; 30
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 388:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	#else
	TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	#endif

	// Initialize avr counter
	TCNT1 = 0;
 392:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 396:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 39a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 39e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 3a2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 3a6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 3aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksPeriodCntDown>
 3ae:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasksPeriodCntDown+0x1>
 3b2:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <tasksPeriodCntDown+0x2>
 3b6:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 3ba:	8f b7       	in	r24, 0x3f	; 63
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	8f bf       	out	0x3f, r24	; 63
 3c0:	08 95       	ret

000003c2 <main>:


int main(void)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	2b 97       	sbiw	r28, 0x0b	; 11
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	81 b9       	out	0x01, r24	; 1
 3da:	12 b8       	out	0x02, r1	; 2
	
	DDRD = 0xFE; PORTD = 0x00;
 3dc:	9e ef       	ldi	r25, 0xFE	; 254
 3de:	9a b9       	out	0x0a, r25	; 10
 3e0:	1b b8       	out	0x0b, r1	; 11
	
	//Set_Clock(500);
	tasksNum = 1;
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasksNum>
	task tsks[1];
	tasks = tsks;
 3e8:	9e 01       	movw	r18, r28
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <tasks+0x1>
 3f2:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <tasks>
	
	// define tasks
	unsigned char i=0;
	tasks[i].state = -1;
 3f6:	89 83       	std	Y+1, r24	; 0x01
	tasks[i].period = 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a0 e0       	ldi	r26, 0x00	; 0
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	8a 83       	std	Y+2, r24	; 0x02
 402:	9b 83       	std	Y+3, r25	; 0x03
 404:	ac 83       	std	Y+4, r26	; 0x04
 406:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 408:	8e 83       	std	Y+6, r24	; 0x06
 40a:	9f 83       	std	Y+7, r25	; 0x07
 40c:	a8 87       	std	Y+8, r26	; 0x08
 40e:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Leader;
 410:	84 e6       	ldi	r24, 0x64	; 100
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	9b 87       	std	Y+11, r25	; 0x0b
 416:	8a 87       	std	Y+10, r24	; 0x0a
	
	TimerSet(tasks[i].period);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9b df       	rcall	.-202    	; 0x358 <TimerSet>
	TimerOn();
 422:	ab df       	rcall	.-170    	; 0x37a <TimerOn>
 424:	ff cf       	rjmp	.-2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
