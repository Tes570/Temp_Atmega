
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003a4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8c  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094c  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004dd  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dc  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c1       	rjmp	.+516    	; 0x23a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3e d1       	rcall	.+636    	; 0x340 <main>
  c4:	6d c1       	rjmp	.+730    	; 0x3a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	89 f0       	breq	.+34     	; 0xee <initUSART+0x26>
  cc:	83 e1       	ldi	r24, 0x13	; 19
  ce:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d8:	e1 ec       	ldi	r30, 0xC1	; 193
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	80 83       	st	Z, r24
  e2:	e2 ec       	ldi	r30, 0xC2	; 194
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 60       	ori	r24, 0x06	; 6
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret
  ee:	e9 ec       	ldi	r30, 0xC9	; 201
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
  f8:	ea ec       	ldi	r30, 0xCA	; 202
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 108:	83 e1       	ldi	r24, 0x13	; 19
 10a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10e:	08 95       	ret

00000110 <USART_Send>:
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	41 f0       	breq	.+16     	; 0x124 <USART_Send+0x14>
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	95 ff       	sbrs	r25, 5
 11c:	fd cf       	rjmp	.-6      	; 0x118 <USART_Send+0x8>
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 122:	08 95       	ret
 124:	e8 ec       	ldi	r30, 0xC8	; 200
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	95 ff       	sbrs	r25, 5
 12c:	fd cf       	rjmp	.-6      	; 0x128 <USART_Send+0x18>
 12e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 132:	08 95       	ret

00000134 <TickFct_Leader>:
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	92 07       	cpc	r25, r18
 13a:	11 f0       	breq	.+4      	; 0x140 <TickFct_Leader+0xc>
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	99 f4       	brne	.+38     	; 0x166 <TickFct_Leader+0x32>
 140:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 144:	85 ff       	sbrs	r24, 5
 146:	0d c0       	rjmp	.+26     	; 0x162 <TickFct_Leader+0x2e>
 148:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	89 27       	eor	r24, r25
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	82 b9       	out	0x02, r24	; 2
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e5       	ldi	r24, 0x55	; 85
 15a:	da df       	rcall	.-76     	; 0x110 <USART_Send>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <TimerISR>:

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 176:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 17a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tasksNum>
 17e:	88 23       	and	r24, r24
 180:	09 f4       	brne	.+2      	; 0x184 <TimerISR+0x1c>
 182:	53 c0       	rjmp	.+166    	; 0x22a <TimerISR+0xc2>
 184:	80 e0       	ldi	r24, 0x00	; 0
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 186:	1b e0       	ldi	r17, 0x0B	; 11
 188:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <tasks>
 18c:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <tasks+0x1>
 190:	18 9f       	mul	r17, r24
 192:	c0 0d       	add	r28, r0
 194:	d1 1d       	adc	r29, r1
 196:	11 24       	eor	r1, r1
 198:	4d 81       	ldd	r20, Y+5	; 0x05
 19a:	5e 81       	ldd	r21, Y+6	; 0x06
 19c:	6f 81       	ldd	r22, Y+7	; 0x07
 19e:	78 85       	ldd	r23, Y+8	; 0x08
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	ab 81       	ldd	r26, Y+3	; 0x03
 1a6:	bc 81       	ldd	r27, Y+4	; 0x04
 1a8:	48 17       	cp	r20, r24
 1aa:	59 07       	cpc	r21, r25
 1ac:	6a 07       	cpc	r22, r26
 1ae:	7b 07       	cpc	r23, r27
 1b0:	b0 f0       	brcs	.+44     	; 0x1de <TimerISR+0x76>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 1b2:	88 81       	ld	r24, Y
 1b4:	e9 85       	ldd	r30, Y+9	; 0x09
 1b6:	fa 85       	ldd	r31, Y+10	; 0x0a
 1b8:	08 2e       	mov	r0, r24
 1ba:	00 0c       	add	r0, r0
 1bc:	99 0b       	sbc	r25, r25
 1be:	09 95       	icall
 1c0:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1c6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <tasks>
 1ca:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <tasks+0x1>
 1ce:	18 9f       	mul	r17, r24
 1d0:	e0 0d       	add	r30, r0
 1d2:	f1 1d       	adc	r31, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	15 82       	std	Z+5, r1	; 0x05
 1d8:	16 82       	std	Z+6, r1	; 0x06
 1da:	17 82       	std	Z+7, r1	; 0x07
 1dc:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 1de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1e2:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <tasks>
 1e6:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <tasks+0x1>
 1ea:	18 9f       	mul	r17, r24
 1ec:	e0 0d       	add	r30, r0
 1ee:	f1 1d       	adc	r31, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	c5 80       	ldd	r12, Z+5	; 0x05
 1f4:	d6 80       	ldd	r13, Z+6	; 0x06
 1f6:	e7 80       	ldd	r14, Z+7	; 0x07
 1f8:	f0 84       	ldd	r15, Z+8	; 0x08
 1fa:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <tasksPeriodGCD>
 1fe:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 202:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 206:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 20a:	4c 0d       	add	r20, r12
 20c:	5d 1d       	adc	r21, r13
 20e:	6e 1d       	adc	r22, r14
 210:	7f 1d       	adc	r23, r15
 212:	45 83       	std	Z+5, r20	; 0x05
 214:	56 83       	std	Z+6, r21	; 0x06
 216:	67 83       	std	Z+7, r22	; 0x07
 218:	70 87       	std	Z+8, r23	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 220:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <tasksNum>
 224:	89 17       	cp	r24, r25
 226:	08 f4       	brcc	.+2      	; 0x22a <TimerISR+0xc2>
 228:	af cf       	rjmp	.-162    	; 0x188 <TimerISR+0x20>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	08 95       	ret

0000023a <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	0b b6       	in	r0, 0x3b	; 59
 246:	0f 92       	push	r0
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 260:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tasksPeriodCntDown>
 264:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tasksPeriodCntDown+0x1>
 268:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <tasksPeriodCntDown+0x2>
 26c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <tasksPeriodCntDown+0x3>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	a1 09       	sbc	r26, r1
 274:	b1 09       	sbc	r27, r1
 276:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tasksPeriodCntDown>
 27a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tasksPeriodCntDown+0x1>
 27e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <tasksPeriodCntDown+0x2>
 282:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 286:	89 2b       	or	r24, r25
 288:	8a 2b       	or	r24, r26
 28a:	8b 2b       	or	r24, r27
 28c:	89 f4       	brne	.+34     	; 0x2b0 <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 28e:	6c df       	rcall	.-296    	; 0x168 <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 294:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 298:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 29c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 2a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tasksPeriodCntDown>
 2a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tasksPeriodCntDown+0x1>
 2a8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <tasksPeriodCntDown+0x2>
 2ac:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <tasksPeriodCntDown+0x3>
	}
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 2d6:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <tasksPeriodGCD>
 2da:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <tasksPeriodGCD+0x1>
 2de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasksPeriodGCD+0x2>
 2e2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <tasksPeriodGCD+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 2e6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <tasksPeriodCntDown>
 2ea:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <tasksPeriodCntDown+0x1>
 2ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tasksPeriodCntDown+0x2>
 2f2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasksPeriodCntDown+0x3>
 2f6:	08 95       	ret

000002f8 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 2f8:	8b e0       	ldi	r24, 0x0B	; 11
 2fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// Thus TCCR1B = 00001011 or 0x0B
	// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 2fe:	8d e7       	ldi	r24, 0x7D	; 125
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	#else
	TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	#endif

	// Initialize avr counter
	TCNT1 = 0;
 310:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 314:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 318:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasksPeriodGCD>
 31c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <tasksPeriodGCD+0x1>
 320:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tasksPeriodGCD+0x2>
 324:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <tasksPeriodGCD+0x3>
 328:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tasksPeriodCntDown>
 32c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tasksPeriodCntDown+0x1>
 330:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <tasksPeriodCntDown+0x2>
 334:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 338:	8f b7       	in	r24, 0x3f	; 63
 33a:	80 68       	ori	r24, 0x80	; 128
 33c:	8f bf       	out	0x3f, r24	; 63
 33e:	08 95       	ret

00000340 <main>:
}




int main(void) {
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	2b 97       	sbiw	r28, 0x0b	; 11
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61

	
	// initialize ports
	DDRA = 0xFF; PORTA = 0x00;
 354:	1f ef       	ldi	r17, 0xFF	; 255
 356:	11 b9       	out	0x01, r17	; 1
 358:	12 b8       	out	0x02, r1	; 2
	initUSART(0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	b5 de       	rcall	.-662    	; 0xc8 <initUSART>
	
	tasksNum = 1; 
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tasksNum>
	task tsks[1]; 
	tasks = tsks; 
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tasks+0x1>
 36c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasks>
	
	// define tasks
	unsigned char i=0; 
	tasks[i].state = -1;
 370:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 1000;
 372:	88 ee       	ldi	r24, 0xE8	; 232
 374:	93 e0       	ldi	r25, 0x03	; 3
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	8a 83       	std	Y+2, r24	; 0x02
 37c:	9b 83       	std	Y+3, r25	; 0x03
 37e:	ac 83       	std	Y+4, r26	; 0x04
 380:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 382:	8e 83       	std	Y+6, r24	; 0x06
 384:	9f 83       	std	Y+7, r25	; 0x07
 386:	a8 87       	std	Y+8, r26	; 0x08
 388:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Leader;
 38a:	8a e9       	ldi	r24, 0x9A	; 154
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9b 87       	std	Y+11, r25	; 0x0b
 390:	8a 87       	std	Y+10, r24	; 0x0a
	
	TimerSet(1000); 
 392:	68 ee       	ldi	r22, 0xE8	; 232
 394:	73 e0       	ldi	r23, 0x03	; 3
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 39a:	9d df       	rcall	.-198    	; 0x2d6 <TimerSet>
 39c:	ad df       	rcall	.-166    	; 0x2f8 <TimerOn>
 39e:	ff cf       	rjmp	.-2      	; 0x39e <main+0x5e>

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
