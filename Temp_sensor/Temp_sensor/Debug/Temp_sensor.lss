
Temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d21  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008eb  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ec  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055a  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	32 d0       	rcall	.+100    	; 0xfe <main>
  9a:	45 c0       	rjmp	.+138    	; 0x126 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay_ms>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	0c c0       	rjmp	.+24     	; 0xbc <delay_ms+0x1e>
  a4:	00 00       	nop
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <delay_ms+0x12>
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	27 30       	cpi	r18, 0x07	; 7
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	36 07       	cpc	r19, r22
  b6:	b4 f3       	brlt	.-20     	; 0xa4 <delay_ms+0x6>
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	48 17       	cp	r20, r24
  be:	59 07       	cpc	r21, r25
  c0:	ac f3       	brlt	.-22     	; 0xac <delay_ms+0xe>
  c2:	08 95       	ret

000000c4 <setupADC>:
}

}
void setupADC()
{
	ADMUX=(1<<REFS0);
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d0:	08 95       	ret

000000d2 <ADC_read>:
}
int ADC_read(int ch)
{
	// select the corresponding channel 0~7
	//int ADC_result=0;
	ch &= 0b00000111;  // AND operation with 7
  d2:	87 70       	andi	r24, 0x07	; 7
  d4:	99 27       	eor	r25, r25
	ADMUX = (ADMUX & 0xF8)|ch;
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	98 7f       	andi	r25, 0xF8	; 248
  de:	89 2b       	or	r24, r25
  e0:	80 83       	st	Z, r24

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes '0' again
	
	while(ADCSRA & (1<<ADSC));
  ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  f0:	86 fd       	sbrc	r24, 6
  f2:	fc cf       	rjmp	.-8      	; 0xec <ADC_read+0x1a>
	//ADC_result=ADCL;
	//ADC_result |=(ADC<<8);
	return (ADC);
  f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  fc:	08 95       	ret

000000fe <main>:
#include "io_2.h"


int main(void)
{
 DDRC=0xFF; PORTC=0x00;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 b9       	out	0x07, r24	; 7
 102:	18 b8       	out	0x08, r1	; 8
 DDRD= 0xFF; PORTD= 0x00;
 104:	8a b9       	out	0x0a, r24	; 10
 106:	1b b8       	out	0x0b, r1	; 11
 DDRA=0x00; PORTA = 0xFF;
 108:	11 b8       	out	0x01, r1	; 1
 10a:	82 b9       	out	0x02, r24	; 2
 DDRB = 0xFF; PORTB = 0x00;//output led 
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	15 b8       	out	0x05, r1	; 5
 int i=0;
 int j=0;
 char orValue= 0x00;
 int tempF;
 int temp;
 setupADC();
 110:	d9 df       	rcall	.-78     	; 0xc4 <setupADC>
// LCD_init();
 ADC_read();
 112:	df df       	rcall	.-66     	; 0xd2 <ADC_read>
 114:	80 e0       	ldi	r24, 0x00	; 0
 //LCD_DisplayString(1,"Hello World");

    while (1)
    {
//adc_result0 = ADC_read(0);      // read adc value at PA0
unsigned short x =ADC_read(0);
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	dc df       	rcall	.-72     	; 0xd2 <ADC_read>
 11a:	88 b9       	out	0x08, r24	; 8

unsigned char lower8 = (char)x;
PORTC = lower8;
 11c:	9b b9       	out	0x0b, r25	; 11
unsigned char upper2 = (char)(x >> 8);
PORTD = upper2;
//temp= ((x*4.88)-500);
//temp=(temp/10);
//PORTC=temp;
delay_ms(2000);
 11e:	80 ed       	ldi	r24, 0xD0	; 208
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	bd df       	rcall	.-134    	; 0x9e <delay_ms>
 124:	f7 cf       	rjmp	.-18     	; 0x114 <main+0x16>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
